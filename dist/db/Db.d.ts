import { MysqlError, PoolConnection } from "mysql";
import DbPoolMap from "./DbPoolMap";
import DbConnMap from "./DbConnMap";
import Context from "../context/Context";
export default class Db {
    ctx: Context;
    db_type: string;
    condition: any;
    setContext(ctx: Context): this;
    setDbType(db_type: string): this;
    beginTransaction(): Promise<boolean>;
    commit(): Promise<boolean>;
    rollback(): Promise<boolean>;
    getConn(): Promise<PoolConnection>;
    transCall(error: MysqlError, resolved: Function, rejected: Function): void;
    table(table_name: string): this;
    static getDbConnMap(db_pool_map: DbPoolMap): Promise<DbConnMap>;
    static releaseConn(db: DbConnMap): void;
    field(f: string): this;
    where(obj: object): this;
    whereEq(obj: any): this;
    whereNotEq(obj: any): this;
    whereIn(obj: any): this;
    whereNotIn(obj: any): this;
    whereBetween(obj: any): this;
    whereNotBetween(obj: any): this;
    whereLike(obj: any): this;
    whereNotLike(obj: any): this;
    whereLt(obj: any): this;
    whereLte(obj: any): this;
    whereGt(obj: any): this;
    whereGte(obj: any): this;
    orderBy(order_by: string): this;
    protected whereCommon(obj: any, call: Function): void;
    protected handleWhere(bind: any[]): string;
    protected handleField(): any;
    protected handleGroup(): string;
    protected handleOrder(): string;
    protected handleLimit(): string;
    query(sql: string, bind: any[]): Promise<any | null>;
    insert(obj: any): Promise<number>;
    findOne<T>(type: (new () => T)): Promise<T | null>;
    findAll<T>(type: (new () => T)): Promise<T[] | null>;
    count(field_name?: string): Promise<number | null>;
    findCommon(): Promise<any | null>;
    update(obj: any): Promise<number | null>;
    delete(): Promise<number | null>;
}
//# sourceMappingURL=Db.d.ts.map